{"ast":null,"code":"const API_URL = \"http://localhost:8000\";\n\nasync function httpGetPlanets() {\n  const response = await fetch(`${API_URL}/planets`);\n  return await response.json();\n}\n\nasync function httpGetLaunches() {\n  // Load launches, sort by flight number, and return as JSON.\n  const response = await fetch(`${API_URL}/launches`);\n  const fetchedLaunches = await response.json();\n  return fetchedLaunches.sort((a, b) => {\n    return a.flightNumber - b.flightNumber;\n  });\n}\n\nasync function httpSubmitLaunch(launch) {\n  // Submit given launch data to launch system.\n  try {\n    const response = await fetch(`${API_URL}/launches`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(launch)\n    });\n    return response;\n  } catch (err) {\n    console.log(err);\n    return {\n      ok: false\n    };\n  }\n}\n\nasync function httpAbortLaunch(id) {\n  // Delete launch with given ID.\n  try {\n    const response = await fetch(`${API_URL}/launches/${id}`, {\n      method: \"delete\"\n    });\n    return response;\n  } catch (err) {\n    console.log(err);\n    return {\n      ok: false\n    };\n  }\n}\n\nexport { httpGetPlanets, httpGetLaunches, httpSubmitLaunch, httpAbortLaunch };","map":{"version":3,"names":["API_URL","httpGetPlanets","response","fetch","json","httpGetLaunches","fetchedLaunches","sort","a","b","flightNumber","httpSubmitLaunch","launch","method","headers","body","JSON","stringify","err","console","log","ok","httpAbortLaunch","id"],"sources":["/home/jakedawson/learning/node_learning/NASA/client/src/hooks/requests.js"],"sourcesContent":["const API_URL = \"http://localhost:8000\";\n\nasync function httpGetPlanets() {\n  const response = await fetch(`${API_URL}/planets`);\n  return await response.json();\n}\n\nasync function httpGetLaunches() {\n  // Load launches, sort by flight number, and return as JSON.\n  const response = await fetch(`${API_URL}/launches`);\n  const fetchedLaunches = await response.json();\n  return fetchedLaunches.sort((a, b) => {\n    return a.flightNumber - b.flightNumber;\n  });\n}\n\nasync function httpSubmitLaunch(launch) {\n  // Submit given launch data to launch system.\n  try {\n    const response = await fetch(`${API_URL}/launches`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(launch),\n    });\n    return response;\n  } catch (err) {\n    console.log(err);\n    return {\n      ok: false,\n    };\n  }\n}\n\nasync function httpAbortLaunch(id) {\n  // Delete launch with given ID.\n  try {\n    const response = await fetch(`${API_URL}/launches/${id}`, {\n      method: \"delete\",\n    });\n    return response;\n  } catch (err) {\n    console.log(err);\n    return {\n      ok: false,\n    };\n  }\n}\n\nexport { httpGetPlanets, httpGetLaunches, httpSubmitLaunch, httpAbortLaunch };\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAhB;;AAEA,eAAeC,cAAf,GAAgC;EAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,UAAZ,CAA5B;EACA,OAAO,MAAME,QAAQ,CAACE,IAAT,EAAb;AACD;;AAED,eAAeC,eAAf,GAAiC;EAC/B;EACA,MAAMH,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,WAAZ,CAA5B;EACA,MAAMM,eAAe,GAAG,MAAMJ,QAAQ,CAACE,IAAT,EAA9B;EACA,OAAOE,eAAe,CAACC,IAAhB,CAAqB,CAACC,CAAD,EAAIC,CAAJ,KAAU;IACpC,OAAOD,CAAC,CAACE,YAAF,GAAiBD,CAAC,CAACC,YAA1B;EACD,CAFM,CAAP;AAGD;;AAED,eAAeC,gBAAf,CAAgCC,MAAhC,EAAwC;EACtC;EACA,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,WAAZ,EAAwB;MAClDa,MAAM,EAAE,MAD0C;MAElDC,OAAO,EAAE;QACP,gBAAgB;MADT,CAFyC;MAKlDC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;IAL4C,CAAxB,CAA5B;IAOA,OAAOV,QAAP;EACD,CATD,CASE,OAAOgB,GAAP,EAAY;IACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;IACA,OAAO;MACLG,EAAE,EAAE;IADC,CAAP;EAGD;AACF;;AAED,eAAeC,eAAf,CAA+BC,EAA/B,EAAmC;EACjC;EACA,IAAI;IACF,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,aAAYuB,EAAG,EAA3B,EAA8B;MACxDV,MAAM,EAAE;IADgD,CAA9B,CAA5B;IAGA,OAAOX,QAAP;EACD,CALD,CAKE,OAAOgB,GAAP,EAAY;IACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;IACA,OAAO;MACLG,EAAE,EAAE;IADC,CAAP;EAGD;AACF;;AAED,SAASpB,cAAT,EAAyBI,eAAzB,EAA0CM,gBAA1C,EAA4DW,eAA5D"},"metadata":{},"sourceType":"module"}